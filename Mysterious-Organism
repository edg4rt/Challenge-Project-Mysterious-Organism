// funcion que devuelve una base de adn al azar
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// funcion que devuelve un string con 15 bases de adn
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}
// fábrica de organismo Pila Aequor
const pAequorFactory = (specimenNum, dna) => {
  return ({
    specimenNum: specimenNum,
    dna: dna,
    mutate(){
      let randomI = Math.floor(Math.random() * dna.length);
      let randomDna = dna[randomI];
      let dnaBases = ['A', 'T', 'C', 'G'];
      let newRandomDna = dnaBases.filter(element => element !== randomDna)[Math.floor(Math.random() * (dnaBases.length -1))];
      this.dna.splice(randomI, 1, newRandomDna);
      return dna;
    }, // fin método mutate
    compareDNA(b){
      let contador = 0;
      for (let i = 0; i < this.dna.length; i++) {
        if (this.dna[i] == b.dna[i]){
        contador++
          }
        }
      return contador;
    }, // fin método compareDNA
    willLikelySurvive(){
      let counterCnG = 0;
      let sixty = 0.6 * this.dna.length;
        for (let i = 0; i < this.dna.length; i++) {
        if (this.dna[i] === 'C' || this.dna[i] === 'G' ){
        counterCnG ++};
        };
      if (counterCnG >= sixty) {
        return true;  
      } else {
        return false;   
      }
    }, //fin del willLikelySurvive
  }) //fin del return que crea un objeto
} //fin función creadora de objetos pAequorFactory


//esta función crea 30 instancias de pAequor que puedan sobrevivir
function create30survivals(){
  let survivalCount = 0;
  let arraySurvivors = [];
  let i = 0;
  do {
    let bichete = pAequorFactory(i, mockUpStrand());
    i++;
    if(bichete.willLikelySurvive() === true){
    arraySurvivors.push(bichete.dna);
    survivalCount++;
    }
  } while (survivalCount < 30);
  return arraySurvivors;
}; 

